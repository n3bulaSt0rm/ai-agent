import json
import time
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from imapclient import IMAPClient
from email import message_from_bytes
from email.header import decode_header

TOKEN_PATH = r"D:\Project\DATN_HUST\ai-agent\secret\dev\token.json"

def decode_mime_words(s):
    """Decode MIME encoded-words in headers"""
    if not s:
        return s
    decoded_parts = []
    for part, encoding in decode_header(s):
        if isinstance(part, bytes):
            decoded_parts.append(part.decode(encoding or 'utf-8', errors='ignore'))
        else:
            decoded_parts.append(part)
    return ''.join(decoded_parts)

def process_new_emails(client, last_unseen_uids):
    """X·ª≠ l√Ω email m·ªõi"""
    try:
        # L·∫•y danh s√°ch email ch∆∞a ƒë·ªçc hi·ªán t·∫°i
        current_unseen = set(client.search(['UNSEEN']))
        
        # T√¨m email m·ªõi (c√≥ trong current nh∆∞ng kh√¥ng c√≥ trong last)
        new_emails = current_unseen - last_unseen_uids
        
        if new_emails:
            print(f"üì¨ Ph√°t hi·ªán {len(new_emails)} email m·ªõi!")
            
            # S·∫Øp x·∫øp theo UID ƒë·ªÉ l·∫•y email m·ªõi nh·∫•t
            new_emails_sorted = sorted(new_emails)[-3:]  # Ch·ªâ l·∫•y 3 email m·ªõi nh·∫•t
            
            try:
                # Fetch email details
                inbox_msgs = client.fetch(new_emails_sorted, ['RFC822'])
                
                for msgid, data in inbox_msgs.items():
                    try:
                        msg = message_from_bytes(data[b'RFC822'])
                        
                        # Decode subject v√† from
                        subject = decode_mime_words(msg.get('Subject', '(No Subject)'))
                        from_addr = decode_mime_words(msg.get('From', '(Unknown Sender)'))
                        
                        print(f"\nüì© [Email m·ªõi UID: {msgid}]")
                        print(f"   From: {from_addr}")
                        print(f"   Subject: {subject}")
                        print(f"   Date: {msg.get('Date', 'Unknown')}")
                        
                    except Exception as e:
                        print(f"‚ùå L·ªói decode email UID {msgid}: {e}")
                        
            except Exception as e:
                print(f"‚ùå L·ªói fetch email: {e}")
        
        return current_unseen
        
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω email: {e}")
        return last_unseen_uids

def main():
    # Load credentials
    creds = Credentials.from_authorized_user_file(TOKEN_PATH, scopes=["https://mail.google.com/"])
    if creds.expired and creds.refresh_token:
        creds.refresh(Request())

    with open(TOKEN_PATH, 'r', encoding='utf-8') as f:
        data = json.load(f)
    email_account = data['account']
    access_token = creds.token

    print(f"üîê ƒê√£ load token cho: {email_account}")

    # K·∫øt n·ªëi IMAP
    client = IMAPClient('imap.gmail.com', ssl=True)
    
    try:
        client.oauth2_login(email_account, access_token)
        print("‚úÖ ƒê√£ k·∫øt n·ªëi Gmail IMAP")
        
        # Select INBOX
        select_info = client.select_folder('INBOX')
        print(f"üìÇ INBOX - T·ªïng s·ªë email: {select_info[b'EXISTS']}")
        
        # L·∫•y danh s√°ch email ch∆∞a ƒë·ªçc ban ƒë·∫ßu
        initial_unseen = set(client.search(['UNSEEN']))
        print(f"üìß Hi·ªán t·∫°i c√≥ {len(initial_unseen)} email ch∆∞a ƒë·ªçc")
        
        print("üì° B·∫Øt ƒë·∫ßu IDLE monitoring... (Ctrl+C ƒë·ªÉ d·ª´ng)")
        
        unseen_uids = initial_unseen
        idle_start_time = time.time()
        
        try:
            while True:
                # Ki·ªÉm tra n·∫øu ƒë√£ IDLE qu√° 9 ph√∫t -> renew
                if time.time() - idle_start_time > 540:  # 9 ph√∫t
                    print("üîÑ Renew IDLE connection (9 ph√∫t)")
                    try:
                        client.idle_done()
                    except:
                        pass
                    time.sleep(0.5)
                    idle_start_time = time.time()
                
                print("‚è≥ B·∫Øt ƒë·∫ßu IDLE...")
                
                # B·∫Øt ƒë·∫ßu IDLE
                client.idle()
                
                # Ch·ªù response v·ªõi timeout ng·∫Øn (30 gi√¢y)
                try:
                    responses = client.idle_check(timeout=30)
                    
                    if responses:
                        print(f"üîî IDLE response: {responses}")
                        
                        # D·ª´ng IDLE ƒë·ªÉ ki·ªÉm tra email
                        client.idle_done()
                        
                        # X·ª≠ l√Ω email m·ªõi
                        unseen_uids = process_new_emails(client, unseen_uids)
                        
                        # Reset timer
                        idle_start_time = time.time()
                        
                    else:
                        # Timeout - d·ª´ng IDLE v√† ki·ªÉm tra email
                        print("‚è∞ IDLE timeout 30s")
                        client.idle_done()
                        
                        # Ki·ªÉm tra email m·ªõi (c√≥ th·ªÉ c√≥ email m√† server kh√¥ng g·ª≠i IDLE response)
                        unseen_uids = process_new_emails(client, unseen_uids)
                        
                        # Reset timer n·∫øu g·∫ßn h·∫øt th·ªùi gian
                        if time.time() - idle_start_time > 480:  # 8 ph√∫t
                            idle_start_time = time.time()
                
                except Exception as e:
                    print(f"‚ùå L·ªói IDLE check: {e}")
                    try:
                        client.idle_done()
                    except:
                        pass
                    
                    # Ki·ªÉm tra connection
                    try:
                        client.noop()
                        print("üîÑ Connection OK, ti·∫øp t·ª•c...")
                    except Exception as conn_e:
                        print(f"‚ùå M·∫•t k·∫øt n·ªëi: {conn_e}")
                        break
                    
                    # Reset timer
                    idle_start_time = time.time()
                
                # Ngh·ªâ ng·∫Øn tr∆∞·ªõc khi IDLE ti·∫øp
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\nüõë D·ª´ng IDLE monitoring")
            try:
                client.idle_done()
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi IMAP: {e}")
        
    finally:
        try:
            client.logout()
            print("üëã ƒê√£ ƒëƒÉng xu·∫•t")
        except:
            pass

if __name__ == "__main__":
    main()